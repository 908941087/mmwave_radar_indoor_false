<!--
  Launch file to perform mapping using octomap with the radar
 -->

<launch>

  <!-- Publish static transform from map to odom for mapping using only odometry info -->
  <node pkg="tf" type="static_transform_publisher" name="static_tf_map_to_odom" args="0 0 0 0 0 0 map odom 100"/>

  <!-- Add nodes to filter/limit Radar data before using it for mapping -->
  <include file="$(find turtlebot_mmwave_launchers)/launch/radar_limit_filters.launch">
  </include>

  <!-- Create "raw" 3D map using first octomap node -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_raw" output="screen">
    <param name="enable_reflection" value="true" />
    <param name="sensor_model/hit" value ="0.85"/>
    <param name="sensor_model/miss" value ="0.48"/>
    <remap from="octomap_point_cloud_centers" to="raw_point_cloud_centers" />
    <remap from="projected_map" to="raw_map" />
    <remap from="cloud_in" to="xyzi_filt_out" />
  </node>
  
  <!-- Perform SOR filtering on output from "raw" octomap node  -->
  <node pkg="nodelet" type="nodelet" name="mapping_SOR_filt_mapping" args="standalone pcl/StatisticalOutlierRemoval" output="screen" >
    <remap from="~input" to="raw_point_cloud_centers" />
    <remap from="~output" to="sor_out" />
    <param name="mean_k" value="20" />
    <param name="stddev" value="0.04" />
  </node>


<!--  TODO: Implement morphology filter to link points of wall -->
<!--  <node pkg="octomap_server" type="morphology_filter_node" name="mapping_morphology"  output="screen">-->
<!--    <remap from="input" to="raw_point_cloud_centers" />-->
<!--    <remap from="output" to="morphology_map" />-->
<!--  </node>-->


  <!-- Create "filtered" 3D map using second octomap node -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_filtered" output="screen" >
    <param name="enable_reflection" value="false" />
    <param name="sensor_model/hit" value ="0.85"/>
    <param name="sensor_model/miss" value ="0.4"/>
    <remap from="octomap_point_cloud_centers" to="filtered_point_cloud_centers" />
    <remap from="projected_map" to="map" />
    <remap from="cloud_in" to="sor_out" />
  </node>

  <!-- Perform SOR filtering on output from "raw" octomap node  -->
  <node pkg="nodelet" type="nodelet" name="planning_sor_points" args="standalone pcl/StatisticalOutlierRemoval" output="screen" >
    <remap from="~input" to="/mmWaveDataHdl/RScan" />
    <remap from="~output" to="path_plan_scan" />
    <param name="mean_k" value="5" />
    <param name="stddev" value="0.04" />
  </node>

</launch>
